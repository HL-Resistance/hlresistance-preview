{"version":3,"sources":["image/Logo.png","Home.js","Hololive.js","Community.js","NoMatch.js","Creative.js","Translation.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","About","Community","NoMatch","Creative","Translation","NavigationBar","Navbar","collapseOnSelect","expand","className","variant","Brand","href","src","logo","alt","Toggle","aria-controls","Collapse","id","Nav","Link","target","App","Fragment","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,kC,iNCG9BC,G,MAAO,kBAChB,6BACI,6CCFKC,EAAQ,kBACjB,6BACI,6CCFKC,EAAY,kBACrB,6BACI,+CCHKC,EAAU,kBACnB,6BACI,yCCDKC,EAAW,kBACpB,6BACI,gDCFKC,EAAc,kBACvB,6BACI,mD,yCCCO,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,UAAU,YAAYC,QAAQ,QACjE,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KACjB,yBAAKH,UAAU,aAAaI,IAAKC,IAAMC,IAAI,UAE7C,kBAACT,EAAA,EAAOU,OAAR,CAAeC,gBAAc,0BAC7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBT,UAAU,sBAAsBU,GAAG,yBAClD,kBAACC,EAAA,EAAD,CAAKX,UAAU,uBACb,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,KAAI,uBAAGH,UAAU,YAAb,SACnB,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,UAAS,uBAAGH,UAAU,YAAb,aACxB,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,cAAa,uBAAGH,UAAU,YAAb,kBAC5B,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,aAAY,uBAAGH,UAAU,YAAb,mBAC3B,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,gBAAe,uBAAGH,UAAU,YAAb,yBAC9B,kBAACW,EAAA,EAAIC,KAAL,CAAUT,KAAK,yCAAyCU,OAAO,UAAS,uBAAGb,UAAU,YAAb,qBCT3E,IA0BQc,EA1Bf,uKAEI,OACE,kBAAC,IAAMC,SAAP,KAEE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,SACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO2B,KAAK,SAASC,UAAW3B,IAChC,kBAAC,IAAD,CAAO0B,KAAK,aAAaC,UAAW1B,IACpC,kBAAC,IAAD,CAAOyB,KAAK,YAAYC,UAAWxB,IACnC,kBAAC,IAAD,CAAOuB,KAAK,eAAeC,UAAWvB,IACtC,kBAAC,IAAD,CAAOuB,UAAWzB,YAdhC,GAAyB0B,IAAMC,WCCXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c63824e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.24a80403.png\";","import React from 'react'\n\n//filler content\nexport const Home = () => (\n    <div>\n        <h2>Hello home</h2>\n    </div>\n)","import React from 'react'\n\n//filler content\nexport const About = () => (\n    <div>\n        <h2>Hello About</h2>\n    </div>\n)","import React from 'react'\n\n//filler content\nexport const Community = () => (\n    <div>\n        <h2>Hello Contact</h2>\n    </div>\n)","import React from 'react'\n\nexport const NoMatch = () => (\n    <div>\n        <h2>NoMatch</h2>\n    </div>\n)","import React from 'react'\n\n//filler content\nexport const Creative = () => (\n    <div>\n        <h2>Hello creative</h2>\n    </div>\n)","import React from 'react'\n\n//filler content\nexport const Translation = () => (\n    <div>\n        <h2>Hello Translation</h2>\n    </div>\n)","import React from 'react';\nimport './NavigationBar.css';\nimport logo from '../image/Logo.png';\nimport { Navbar, Nav } from 'react-bootstrap';\n// import logo from 'Logo.png';\n\nexport default function NavigationBar() {\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" className=\"color-nav\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">\n        <img className=\"logo-image\" src={logo} alt=\"logo\"></img>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse className=\"justify-content-end\" id=\"responsive-navbar-nav\">\n        <Nav className=\"justify-content-end\">\n          <Nav.Link href=\"/\"><p className=\"linkText\">HOME</p></Nav.Link>\n          <Nav.Link href=\"/about\"><p className=\"linkText\">HOLOLIVE</p></Nav.Link>\n          <Nav.Link href=\"/community\"><p className=\"linkText\">OUR COMMUNITY</p></Nav.Link>\n          <Nav.Link href=\"/creative\"><p className=\"linkText\">CREATIVE WORKS</p></Nav.Link>\n          <Nav.Link href=\"/translation\"><p className=\"linkText\">HOLOLIVE TRANSLATION</p></Nav.Link>\n          <Nav.Link href=\"https://discord.gg/hololive-resistance\" target=\"_blank\"><p className=\"linkText\">COME JOIN US!</p></Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Home } from './Home';\nimport { About } from './Hololive';\nimport { Community } from './Community';\nimport { NoMatch } from './NoMatch';\nimport { Creative } from './Creative';\nimport { Translation } from './Translation';\nimport NavigationBar from './components/NavigationBar';\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        {/* //imported from components/navigationBar.js */}\n        <NavigationBar></NavigationBar>\n        <HashRouter>\n          <Router> {/* //Handles link to all component */}\n            <Switch>\n              <Route exact path=\"/\" component={Home}></Route>\n              <Route path=\"/about\" component={About}></Route>\n              <Route path=\"/community\" component={Community}></Route>\n              <Route path=\"/creative\" component={Creative}></Route>\n              <Route path=\"/translation\" component={Translation}></Route>\n              <Route component={NoMatch}></Route>\n              {/* //if end of path does not match any of the path=\"/xxx\" will route to NoMatch.js */}\n            </Switch>\n          </Router>\n        </HashRouter>\n      </React.Fragment>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// The end product is render her by taking app.js and providing to public/index.html\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}